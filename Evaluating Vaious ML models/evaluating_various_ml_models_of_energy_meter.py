# -*- coding: utf-8 -*-
"""Evaluating Various ML models of Energy meter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1df4AXFikXnMOxWmN-6kgoCqqOfMrI6pV

ENERGY METER
"""

# uploading the file in colab
from google.colab import files
uploaded=files.upload()

import pandas as pd
dataset=pd.read_csv("Energy Meter.csv",names=["Voltage","Current","Power","Class"])
dataset

# Summarize Dataset
dataset.describe()

dataset.shape

dataset.info()

# To know the count of each category in class column
dataset.groupby("Class").size()

from pandas.plotting import scatter_matrix
from matplotlib import pyplot

dataset.plot(kind="bar",subplots=True,layout=(2,2))
pyplot.title("BAR PLOT")
pyplot.show()

dataset.hist()
pyplot.title("Histogram Plot")
pyplot.show()

scatter_matrix(dataset)
pyplot.title("Scatter Plot")
pyplot.show()

"""# Evaluating Various algorithms"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold

array=dataset.values
X=array[:,0:3]
Y=array[:,3]
X_train,X_validation,Y_train,Y_validation=train_test_split(X,Y,test_size=0.20,random_state=1,shuffle=True)

models=[]
models.append(("LR",LogisticRegression(solver="liblinear",multi_class="ovr")))
models.append(("LDA",LinearDiscriminantAnalysis()))
models.append(("KNN",KNeighborsClassifier()))
models.append(("CART",DecisionTreeClassifier()))
models.append(("NB",GaussianNB()))
models.append(("SVM",SVC(gamma="auto")))

results=[]
names=[]
res=[]
for name,model in models:
  kfold=StratifiedKFold(n_splits=10,random_state=None)
  cv_results=cross_val_score(model,X_train,Y_train,cv=kfold,scoring="accuracy")
  results.append(cv_results)
  names.append(name)
  res.append(cv_results.mean())
  print('%s: %f(%f)' % (name,cv_results.mean(),cv_results.std()))

pyplot.ylim(.990,.999)
pyplot.bar(names,res,color='maroon',width=0.6)

pyplot.title("Algorithm Comparision")
pyplot.show()